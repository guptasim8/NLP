# -*- coding: utf-8 -*-
"""BertClassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/190NERJK5dcmSEwpjJ4u141fs192hXTSh
"""

!pip install transformers
import os
import pandas as pd
import torch
import numpy as np

os.environ['CUDA_LAUNCH_BLOCKING'] = "1"
use_cuda = torch.cuda.is_available()
device = torch.device("cpu")
# If we have a GPU available, we'll set our device to GPU. We'll use this device variable later in our code.
if use_cuda:
    device = torch.device("cuda")
    print("GPU is available")
else:
    print("GPU not available, CPU used")

datapath = 'bbc-text.csv'
df = pd.read_csv(datapath)

df.groupby(['category']).size().plot.bar()

from transformers import BertTokenizer
tokenizer = BertTokenizer.from_pretrained('bert-base-cased')

labels = {'business':0,
          'entertainment':1,
          'sport':2,
          'tech':3,
          'politics':4
          }

class Dataset(torch.utils.data.Dataset):

    def __init__(self, df):
        # self.input=[t for t in df['text']]
        self.labels = [labels[label] for label in df['category']]
        self.texts = [tokenizer(text, 
                               padding='max_length', max_length = 512, truncation=True,
                                return_tensors="pt") for text in df['text']]

    def classes(self):
        return self.labels

    def __len__(self):
        return len(self.labels)

    def get_batch_labels(self, idx):
        return np.array(self.labels[idx])

    def get_batch_texts(self, idx):
        return self.texts[idx]

    def __getitem__(self, idx):
        batch_texts = self.get_batch_texts(idx)
        batch_y = self.get_batch_labels(idx)
        return batch_texts, batch_y

np.random.seed(112)
df_train, df_val, df_test = np.split(df.sample(frac=1, random_state=42), 
                                     [int(.8*len(df)), int(.9*len(df))])

# print(len(df_train),len(df_val), len(df_test))

from torch import nn
from transformers import BertModel

class BertClassifier(nn.Module):

    def __init__(self, dropout=0.5):

        super(BertClassifier, self).__init__()

        self.bert = BertModel.from_pretrained('bert-base-cased')
        self.dropout = nn.Dropout(dropout)
        self.linear = nn.Linear(768, 5)
        # self.relu = nn.ReLU() #

    def forward(self, input_id, mask):

        _, pooled_output = self.bert(input_ids= input_id, attention_mask=mask,return_dict=False)
        dropout_output = self.dropout(pooled_output)
        linear_output = self.linear(dropout_output)
        # final_layer = self.relu(linear_output) #
        # return final_layer

        return linear_output

model = BertClassifier()

from tqdm import tqdm
def train(model, train_data, val_data, learning_rate, epochs):

    train, val = Dataset(train_data), Dataset(val_data)

    train_dataloader = torch.utils.data.DataLoader(train, batch_size=2, shuffle=True)
    val_dataloader = torch.utils.data.DataLoader(val, batch_size=2)

    criterion = nn.CrossEntropyLoss()
    optimizer = torch.optim.Adam(model.parameters(), lr= learning_rate)#

    if use_cuda:
      model = model.to(device)
      criterion = criterion.to(device)

    for epoch_num in range(epochs):

            total_acc_train = 0
            total_loss_train = 0

            for train_input, train_label in tqdm(train_dataloader):

                train_label = train_label.to(device)
                mask = train_input['attention_mask'].to(device)
                input_id = train_input['input_ids'].squeeze(1).to(device)
                output = model(input_id, mask)
                
                batch_loss = criterion(output, train_label.long())
                total_loss_train += batch_loss.item()
                
                acc = (output.argmax(dim=1) == train_label).sum().item()
                total_acc_train += acc

                model.zero_grad()
                batch_loss.backward()
                optimizer.step()
                optimizer.zero_grad()#
            
            total_acc_val = 0
            total_loss_val = 0

            with torch.no_grad():
                for val_input, val_label in val_dataloader:
                    val_label = val_label.to(device)
                    mask = val_input['attention_mask'].to(device)
                    input_id = val_input['input_ids'].squeeze(1).to(device)
                    output = model(input_id, mask)

                    batch_loss = criterion(output, val_label.long())
                    total_loss_val += batch_loss.item()
                    
                    acc = (output.argmax(dim=1) == val_label).sum().item()
                    total_acc_val += acc
      
            print(
                f'Epochs: {epoch_num + 1} | Train Loss: {total_loss_train / len(train_data): .3f} \
                | Train Accuracy: {total_acc_train / len(train_data): .3f} \
                | Val Loss: {total_loss_val / len(val_data): .3f} \
                | Val Accuracy: {total_acc_val / len(val_data): .3f}')

EPOCHS = 3
LR = 1e-6
train(model, df_train, df_val, LR, EPOCHS)

def soft_max(x):
  x=x.to('cpu')
  # print(x)
  x=x.numpy()
  return np.exp(x)/np.sum(np.exp(x),axis=0)

def evaluate(model, test_data):
    data=[]
    out = pd.DataFrame.from_records(data,columns =['category','pred_category','probability'])
    test = Dataset(test_data)
    test_dataloader = torch.utils.data.DataLoader(test, batch_size=5)
    use_cuda = torch.cuda.is_available()
    device = torch.device("cuda" if use_cuda else "cpu")
    if use_cuda:
        model = model.cuda()
    i=0
    total_acc_test = 0
    with torch.no_grad():
        for test_input, test_label in test_dataloader:
              test_label = test_label.to(device)
              mask = test_input['attention_mask'].to(device)
              input_id = test_input['input_ids'].squeeze(1).to(device)
              output = model(input_id, mask)
              i=0
              for row in output:
                  probability_matrix=max(soft_max(row))
                  y_pred=row.argmax().to('cpu').numpy()
                  out.loc[len(out.index)] =[test_label[i].to('cpu').numpy(),y_pred,probability_matrix]
                  i+=1
              acc = (output.argmax(dim=1) == test_label).sum().item()
              total_acc_test += acc
    print(f'Test Accuracy: {total_acc_test / len(test_data): .3f}')
    return out

df2=evaluate(model, df_test)

df_test.reset_index(inplace=True)

del df_test['index']

del df_test['category']
df_test.join(df2)

df_test.to_csv("output.csv")